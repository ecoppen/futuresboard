{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"HomeFuturesboard","text":"<p>Note</p> <p>Futuresboard v2 is currently in development and can be found in it's own branch, this page is for v1</p> <p> A python (3.7+) based scraper and dashboard to monitor the performance of your Binance or Bybit Futures account. </p> <p>"},{"location":"#introduction","title":"Introduction","text":"<p>futuresboard is a free and open source python (3.7+) a dashboard for your Binance or Bybit Futures account.  It is built on the Flask framework.</p> <p></p>"},{"location":"#features","title":"Features","text":"<ul> <li>Monitoring: View current positions and open orders</li> <li>Charts: PnL for account and pair over customisable timescales, Kline charts with position and orders plotted, future projection of profits</li> <li>Export: Save trades to spreadsheet</li> </ul>"},{"location":"#supported-exchanges-for-direct-data","title":"Supported exchanges for direct data","text":"<ul> <li>Binance</li> <li>Bybit</li> </ul>"},{"location":"futuresboard/","title":"Setup","text":""},{"location":"futuresboard/#cloning-and-installing","title":"Cloning and installing","text":"<p>If the git framework is not installed already for downloading from GitHub, install with <code>apt-get install git</code> or through a package on gitscm</p> <p>Clone this repository: <code>git clone https://github.com/ecoppen/futuresboard.git</code></p> <p>Navigate to the futuresboard directory in a terminal/cmd: <code>cd futuresboard</code></p> <p>Install dependencies: <code>python -m pip install .</code> making sure to include the dot</p> <p>Copy <code>config/config.json.example</code> to <code>config/config.json</code> and add your new api key and secret: <code>cp config/config.json.example config/config.json</code> and then <code>nano config.json</code></p>"},{"location":"futuresboard/#api-setup","title":"API Setup","text":"<p>It is highly recommended to setup an independent API key solely for the purpose of reading data and nothing extra. </p> <p>Limiting the IP address to your VPS/PC is highly recommended for added security.</p> <p>Be sure to make a note of your <code>API Key</code> and <code>API Secret</code> for use in your server setup.</p>"},{"location":"futuresboard/#configuration","title":"Configuration","text":"<p>The <code>/config/config.json</code> file allows you to customise the look and feel of your dashboard as follows:</p> <ul> <li><code>AUTO_SCRAPE_INTERVAL</code> is set to 300 seconds, this value can be adjusted between 60 and 3600</li> <li><code>NAVBAR_TITLE</code> changes the branding in the top left of the navigation (see below)</li> <li><code>NAVBAR_BG</code> changes the colour of the navigation bar, acceptable values are: bg-primary, bg-secondary, bg-success, bg-danger, bg-warning, bg-info and the default bg-dark</li> <li><code>PROJECTIONS</code> changes the percentage values on the projections page. 1.003 equates to 0.3% daily and 1.01 equates to 1% daily.</li> </ul>"},{"location":"futuresboard/#scraping","title":"Scraping","text":"<p>Collect your current trades by running <code>futuresboard --scrape-only</code>.</p> <p>Reminder: Binance API allows you to consume up to 1200 weight / minute / IP.</p> <ul> <li>Account: Fetching account information costs 5 weight per run</li> <li>Income: Fetching income information costs 30 weight per 1000 (initial run will build database, afterwards only new income will be fetched)</li> <li>Orders: Fetching open order information costs 40 weight per run</li> <li>The scraper will sleep for a minute when the rate exceeds 800 within a minute</li> </ul>"},{"location":"futuresboard/#running","title":"Running","text":"<p>Start the futuresboard web application <code>futuresboard</code></p> <p>Navigate to the IP address shown e.g. <code>http://127.0.0.1:5000/</code>. These settings can be changed by passing <code>--host</code> and/or <code>--port</code> when running the above command</p>"},{"location":"passivbot/","title":"passivbot","text":"<p>Note</p> <p>Futuresboard can be run without using any 'bot', it will simply read from your account. I created futuresboard to track my passivbot PnL.</p> <p>Passivbot is a fully automated trading bot built in Python (3.8 for most things, 3.8+ for live) by @enarjord.</p> <p>It was designed to provide a stable and low-risk profit avenue without manual actions, however it can also be used in a high-risk way if you aren't careful (or if you want to do so).</p> <p>Passivbot trades in futures (7x) or spot markets on either Binance or Bybit, using grid trading.</p> <p>This guide will focus on some of the common issues people run into when jumping into a trading bot, visit the official website for instructions on getting setup.</p>"},{"location":"passivbot/#risks","title":"Risks","text":"<p>Danger</p> <p>You should never trade with money you cannot afford (or are afraid) to lose. As with every bot, you are responsible for how it is configured and therefore how it performs, win or lose.</p> <p>On futures markets with leverage, passivbot may expose more than 100% of the wallet's funds. To measure a position's risk, passivbot finds the ratio of position size to total unleveraged balance.</p> <p>The formula for Position cost to Balance Ratio (PBR) is: <code>pbr = (position_size * position_price) / unleveraged_wallet_balance</code></p> <p>Info</p> <p>PBR is no longer referred to within the docs or community, instead Wallet Exposure (WE) is used instead. The concept is similar and therefore these calculations are still pertinent.</p> <p><code>pbr==0.0</code> means no position <code>pbr==1.0</code> means 100% of unleveraged wallet balance is in position. <code>pbr==4.0</code> means 400% of unleveraged wallet balance is in position. Each bot is configured with a parameter pbr_limit, greater than which the bot will not allow a position's pbr to grow. Having multiple bots active at the same time will mean a larger exposure, so beware as having <code>3 bots at 1.0 each == 10 bots at 0.3 each</code></p> <p>Bankruptcy is defined as when equity <code>(balance + unrealized_pnl) == 0.0</code>, that is, when total debt is equal to total assets.</p> <p>Liquidation happens when the exchange force closes a position to avoid it going into negative equity. This usually happens before actual bankruptcy is reached, in order for exchange to cover slippage costs.</p> <p>Bankruptcy price may be calculated from position and balance.</p> <p><code>pbr==1.0</code>, bankruptcy price is zero. <code>pbr==2.0</code>, bankruptcy price is 50% lower than position price. <code>pbr==3.0</code>, bankruptcy price is 33.33% lower than position price. <code>pbr==10.0</code>, bankruptcy price is 10% lower than position price.</p>"},{"location":"passivbot/#profit-expectations","title":"Profit expectations","text":"<p>Passivbot can be run in a high risk, high reward mode by running a high leverage and high PBR. Similarly it can be run in a low risk, low reward mode by not altering the leverage (default is 7x) and lowering the PBR.</p> <p>Warning</p> <p>Try to avoid the lure of high ADG by using high leverage, high PBR or a high risk configuration as they are more prone to liquidation in times where the market is crashing downwards.</p> <p>Generally you should pay attention to the percentage of profits your bot(s) make rather than absolute figures. This allows you to understand the effect of changing your wallet size, make predictions for future profits if consistently maintained and compare performance against others running similar coins.</p> <p>When first starting out you need to think realistically about your profit expectations and adjust them over time as you understand the process the bot goes through and you hit your targets. Below are some targets for you to begin with and after ticking off each one, move onto the next. - 1 month target - $5/$6/$8 - Cover the cost of running the bot - 1 month target - 2% - Beat your banks yearly interest rate in a month - 1 month target - 8% - Beat your banks yearly interest rate 4x over in a month</p> <p>If you've managed to do all of these then the next goal is to maintain it before thinking about new targets but honestly, is 4x your banks yearly interest rate in one month not enough?! Remember that profits are compounding. Below are some examples using these figures on different wallets - $1000 at 2% per year results in $1020.20 after one year. At 2% monthly results in $1271.15 and at 8% $2,608.41. - $5000 at 2% per year results in $5101 after one year. At 2% monthly results in $6,355.74 and at 8% $13,042.04. - $10000 at 2% per year results in $10,202.01 after one year. At 2% monthly results in $12,711.49 and at 8% $26,084.07.</p> <p>The important part is not get 20% in your first month then be liquidated (-100%) in the next because you went for higher risk and reward.</p>"},{"location":"passivbot/#coin-selection","title":"Coin selection","text":"<p>You can select any coin pairings that are listed on your exchange however there are certain factors that make coins more profitable and/or suitable for your particular setup.</p> <p>The first consideration you need to have is the price of the coin. Passivbot will create a grid of orders that increase with each entry, for example the first might be 1 unit, the second might be 2, the third is 4 and the last is 8. If this is the case, once all of the units have been bought you would have 15 units. If you were running BTC at a rate of $45000 your wallet would need to be able to deal with at least $675000 ($45000 * 15) which even at 7x leverage is a lot. Similarly if you went for AVAX at $100 per unit you would need to be able to cover $1500. Taking this into consideration alongside a wallet of $1000 and a PBR setting of 0.2 ($200 available of the $1000) you can see why considering the price is important. It is important to note that these examples are assuming that you can only buy 1 unit each time which is true of coins like AVAX and SOL however BTC allows you to buy small amounts e.g. 0.0001 so therefore can be still be used on smaller wallets.</p> <p>Info</p> <p>Coins like ADA ($0.36), HOT ($0.002), VET ($0.03) and XLM ($0.08) are good starting points for optimising and backtesting with smaller (&lt;= $1000) wallets because of their relatively accessible price however you still need to check them!</p> <p>The next consideration you should think about is the volume of the coin compared to the market cap and the volatility of the coin itself. ADA was listed above as a good starting point however if it is acting like a stablecoin (small volatility on a daily/weekly/monthly basis) then it won't be suitable. If the volume of a coin over 24 hours was 815989512 and the market cap was 1145588013 then the volatility would be 0.71 which shows quite a high level of volatility and might be suitable. This information and more can be viewed at websites like coinmarketcap.com</p> <p>Warning</p> <p>Whichever coin you select and for whatever reason, you should optimise and backtest thoroughly before going live.</p>"},{"location":"server_setup/","title":"Servers","text":"<p>Note</p> <p>An external server setup is recommended over one in your home because of speed, reliability and location. This guide is going to assume you're running Debian 10+</p> <p>Tip</p> <p>This is my referral code for vultr which gives $100 free credit for 1 month: vultr referral</p>"},{"location":"server_setup/#server-setup","title":"Server setup","text":"<p>Login using <code>root@IP</code> for example in terminal <code>SSH root@10.10.10.10</code> where <code>10.10.10.10</code> is the IP of your server</p> <p><code>Yes</code> to save your SSH key. If you are not asked for this, revisit your the setup page of your server.</p> <p>Open the SSH config file with nano <code>/etc/ssh/sshd_config</code></p> <p>Change <code>#PasswordAuthentication yes</code> to <code>PasswordAuthentication no</code>. If you can't find this line, add it at the bottom of the file. This will disable user login via password only, instead requiring an SSH key.</p> <p><code>ctrl+x</code> to quit, <code>y</code> to save changes and then press <code>enter/return</code> to keep the same file name</p> <p>Activate the changes with <code>service ssh reload</code></p> <p>Open the repository settings file with <code>nano /etc/apt/sources.list</code></p> <p>Add <code>deb http://http.us.debian.org/debian/ testing non-free contrib main</code> to the end of the file. This will allow the filesystem to be updated with the latest versions of software.</p> <p>Note</p> <p>This will include Python 3.11</p> <p><code>ctrl+x</code> to quit, <code>y</code> to save changes and then press <code>enter/return</code> to keep the same file name</p> <p><code>apt-get update --allow-releaseinfo-change</code> to update the repository list in the OS</p> <p><code>apt-get upgrade</code> to install the latest updates. This may take a few minutes.</p> <p>Install a popular intrusion prevention software such as <code>apt-get install fail2ban</code>. More information on how to configure this to your needs can be found here: fail2ban</p> <p>Install the git framework, for downloading from GitHub with <code>apt-get install git</code></p> <p>Install the terminal multiplexer (alternative to screen) with <code>apt-get install tmux</code></p> <p>Install the session manager for tmux with <code>apt-get install tmuxp</code></p> <p>Make sure the system clock is always accurate with <code>apt-get install systemd-timesyncd</code></p> <p>Install the Python package installer with <code>apt-get install python3-pip</code> which will be used to install the libraries required for most python programs</p> <p>Install the Python virtual enviroment manager pipenv <code>pip install pipenv</code></p>"},{"location":"server_setup/#installing-from-requirements","title":"Installing from requirements","text":"<p>If you have installed Python 3.11 then you may have to include <code>--break-system-packages</code> at when installing any requirements to a project. Ideally you'll be using a virtual environment and won't need this, for example we installed pipenv for this purpose.</p>"},{"location":"server_setup/#session-management","title":"Session management","text":"<p>Sessions can be managed through multiple <code>screen</code>s however we have already installed the session manager <code>tmuxp</code> that allows the creation and termination of sessions with <code>tmux</code> easily.</p> <p>Create the file session YAML file with <code>nano session.yaml</code>. Copy the code below with <code>ctrl + c</code> and paste it into the terminal window by <code>ctrl + v</code> or right click.</p> <pre><code>session_name: passiv_session\nwindows:\n- window_name: passiv_1\n  layout: even-vertical\n  shell_command_before:\n    - cd ~/passivbot\n  panes:\n    - shell_command:\n        - python3 passivbot.py binance_01 COINUSDT configs/live/COIN.json -m future -lw 0.3\n    - shell_command:\n        -\n    - shell_command:\n        -\n    - shell_command:\n        -\n- window_name: passiv_2\n  layout: even-vertical\n  shell_command_before:\n    - cd ~/passivbot\n  panes:\n    - shell_command:\n        -\n    - shell_command:\n        -\n    - shell_command:\n        -\n    - shell_command:\n        -\n- window_name: passiv_3\n  layout: even-vertical\n  shell_command_before:\n    - cd ~/passivbot\n  panes:\n    - shell_command:\n        -\n    - shell_command:\n        -\n    - shell_command:\n        -\n    - shell_command:\n        -\n- window_name: passiv_GS\n  layout: even-vertical\n  shell_command_before:\n    - cd ~/passivbot\n  panes:\n    - shell_command:\n        -\n    - shell_command:\n        - \n    - shell_command:\n        - \n    - shell_command:\n        - \n</code></pre> <p>In this file there are four windows: <code>passiv_1</code>, <code>passiv_2</code>, <code>passiv_3</code> and <code>passiv_GS</code></p> <p>Each window has four slots for bot commands to run indicated under <code>- shell_command</code> with a <code>-</code>, the first slot has an example filled in for you. This setup allows for 16 bots to be run simultaneously however on closer inspection there is one window called <code>passiv_GS</code> for when you wish to use the <code>-gs</code> command (graceful stop) and keep other bots running</p> <p><code>ctrl+b</code> and then <code>w</code> - select a window to view</p> <p><code>ctrl+b</code> and then <code>d</code> - detach screen</p> <p><code>ctrl+b</code> and then <code>o</code> - move between the slots on each window</p> <p><code>ctrl+b</code> and then <code>s</code> - display all sessions</p> <p><code>ctrl+b</code> and then <code>{</code> or <code>}</code> - reorder slots on a window</p> <p><code>tmuxp load session.yaml</code> - load the screen manager (if they are already present, view the screen)</p> <p><code>tmux kill-session</code> - stop all bots/screens that are open (in case you need to reload the bot or change a configuration)</p>"},{"location":"server_setup/#server-rebooting","title":"Server rebooting","text":"<p>If your VPS reboots itself for whatever reason, you will want your bot to restart ASAP to ensure that orders and positions are maintained correctly. Further you will probably want to know and potentially investigate any issues.</p> <p>Firstly you need to decide whether you want a notification to be sent to you and via which medium. The code below offers both discord and telegram notifications. If you need to use telegram, make sure you install the required library with the command <code>pip3 install pyTelegramBotAPI</code>. Make sure you change the <code>WEBHOOK_URL</code> if you're using discord and the <code>TELEGRAM_HTTP_API</code> and <code>TELEGRAM_USER_ID</code> if you're using telegram. It should go without saying that you want these to be sent privately, so don't use an open discord server or telegram group.</p> <pre><code>import argparse\n\ndef init_argparse():\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"-a\", \"--action\")\n    parser.add_argument(\"-m\", \"--message\")\n    return parser\n\ndef send_to_discord(action, message_to_send):\n    import requests\n\n    message = \":white_check_mark: Script has run\"\n    if action == \"start\":\n        message = \":exclamation: VPS booted and passivbot started\"\n    elif action == \"restart\":\n        message = \":white_check_mark: passivbot restarted\"\n    if message_to_send is not None:\n        message = f\"{message_to_send}\"\n\n    mUrl = \"WEBHOOK_URL\"\n\n    data = {\"content\": message}\n    response = requests.post(mUrl, json=data)\n\ndef send_to_telegram(action, message_to_send):\n    import telebot\n\n    message = \"\u2705 Script has run\"\n    if action == \"start\":\n        message = \"\u2757 VPS booted and passivbot started\"\n    elif action == \"restart\":\n        message = \"\u2705 passivbot restarted\"\n    if message_to_send is not None:\n        message = f\"{message_to_send}\"\n\n    telegram_http_api = \"\"\n    telegram_user_id = \"\"\n\n    bot = telebot.TeleBot(telegram_http_api)\n    bot.send_message(telegram_user_id, message)\n\nparser = init_argparse()\nargs = parser.parse_args()\naction, message_to_send = None, None\nif args.action is not None:\n    action = args.action\nif args.message is not None:\n    message_to_send = args.message\n\nsend_to_discord(action, message_to_send)\nsend_to_telegram(action, message_to_send)\n</code></pre> <p>You can test that it works by typing <code>python3 notify.py -m hello</code> or <code>python3 notify.py -a start</code>.</p> <p>There are two files required. One to start (reboot server) and one to restart (if you want it periodically to check it's alive). You can remove the notify.py from either or both files if you don't intend to use it</p> <pre><code>`#!/bin/bash\n\npython3 notify.py -a start\nsleep 0.5\ntmuxp load session.yaml\n</code></pre> <pre><code>#!/bin/bash\n\npython3 notify.py -a restart\nsleep 0.5\ntmux kill-session\nsleep 0.5\ntmuxp load session.yaml\n</code></pre> <p>These can be tested by typing <code>sh restart.sh</code>(if the session is running) and <code>sh start.sh</code> if not. If you are using <code>notify.py</code> you will receive a message unless you removed the code previously.</p> <p>Next make sure the files sh files are executable by cron with <code>chmod +x start.sh restart.sh</code></p> <p>We're now ready to have these run automatically which can be done with crontab. To access this, type: <code>crontab -e</code> and selecting <code>1</code> to use nano as your editor.</p> <p>At the bottom of the file, put the following two lines:</p> <pre><code>@reboot sleep 10; /bin/bash -c /root/start.sh\n@hourly /bin/bash -c /root/restart.sh\n</code></pre> <p><code>ctrl+x</code> to quit, <code>y</code> to save changes and then press <code>enter/return</code> to keep the same file name</p> <p>Providing this is correct, you should see the message <code>crontab: installing new crontab</code> and then messages every hour or on a reboot.</p>"}]}